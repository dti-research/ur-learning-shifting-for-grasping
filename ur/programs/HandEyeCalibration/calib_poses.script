def calib_poses():
  set_tcp(p[0.0,0.0,0.2505,0.0,0.0,0.0])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_gravity([0.0, 0.0, 9.82])
  set_safety_mode_transition_hardness(1)
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_target_payload(2.260000, [-0.011000, 0.004000, 0.073000], [0.005991, 0.005991, 0.005991, 0.000000, 0.000000, 0.000000])
  step_count_6879f789_91d0_4090_882a_a29b4706db19 = 0.0
  thread Step_Counter_Thread_7dba8c81_5e1d_4557_99ad_9a459189569b():
    while (True):
      step_count_6879f789_91d0_4090_882a_a29b4706db19 = step_count_6879f789_91d0_4090_882a_a29b4706db19 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_7dba8c81_5e1d_4557_99ad_9a459189569b()
  global Bin1=p[0.182829499211491,-0.31599183731772934,0.12098501050339178,2.2036803227058535,-2.2363193378226676,-0.00844733517379955]
  global Bin2=p[-0.017098588478363107,-0.3118063131340838,0.1200303801430907,0.008134537013944126,0.004632074070180949,3.120787872374472]
  global base_plate=p[0.36881237191148547,-0.6000691173989049,-0.0027197573347747805,-0.005825777676998524,-0.0028408219250887585,1.5707632180069593]
  global cam_bin1=p[0.015246587324777763,-0.48632105149032473,0.1991416605260554,2.2238502978308787,-2.2151871723437186,-0.002876938519447563]
  global cam_bin2=p[-0.18471565021029393,-0.48713770995455663,0.1998023730738432,2.223835378588522,-2.2152176892310154,-0.0028636673500633363]
  global referencePoint=p[0.2041031046618184,-0.24438718293693595,0.12099020883995079,-2.322256480213841,-1.3944314825346658,0.21510972489769684]
  global separatorPoint=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: DTI UR Library, 0.3.0, Danish Technological Institute
  #   Type: DTI UR Library
  ############################################################################
  # Copyright (C) Danish Technological Institute - All Rights Reserved       #
  # Unauthorized copying of this file, via any medium is strictly prohibited #
  # Proprietary and confidential                                             #
  # Written by Jens-Jakob Bentsen <jebe@dti.dk>, November 2020               #
  #                                                                          #
  # Force based moving and force checking                                    #
  #                                                                          #
  # Version                                                                  #
  dti_force_version = 2                                                      #
  #                                                                          #
  # dependencies on other DTI script files                                   #
  # int_dummy = NO_DEPENDENCIES                                              #
  #                                                                          #
  ############################################################################

  def get_dti_force_version():
    return dti_force_version
  end

  def get_dti_force_deps():
    # NO DEPS
    return True
  end


  # like UR's builtin get_tcp_force(), but return the force and torque values transformed
  # along the axes of the given pose
  # param pose: any valid pose, defaults to base, the x, y, and z values are ignored
  # return: 6D force vector with [Fx, Fy, Fz, Mx, My, Mz] aligned to pose in N and Nm respectively
  def get_tcp_force_in_frame(pose=p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]):

    # we are only interested in the rotation of pose, set translations to zero
    local target_pose = pose
    target_pose[0] = 0
    target_pose[1] = 0
    target_pose[2] = 0

    # the conversion needs to happen as poses, so we need to convert back and forth a bit
    local force = get_tcp_force()
    local force_vector_as_pose = p[force[0], force[1], force[2], 0, 0, 0]
    local torque_vector_as_pose = p[force[3], force[4], force[5], 0, 0, 0]
    local transformed_force_as_pose = pose_trans(pose_inv(target_pose), force_vector_as_pose)
    local transformed_torque_as_pose = pose_trans(pose_inv(target_pose),torque_vector_as_pose)
    return [transformed_force_as_pose[0], transformed_force_as_pose[1], transformed_force_as_pose[2], transformed_torque_as_pose[0], transformed_torque_as_pose[1], transformed_torque_as_pose[2]]
  end

  # get the force or torque values at the TCP along a single axis of the given pose
  # param axis: number of axis of pose, 0=x, 1=y, ...
  # param pose:  any valid pose, defaults to base, , the x, y, and z values are ignored
  # return: force or torque value in N or Nm respectively
  def get_tcp_force_1d(axis, pose=p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]):
    local force_vector = get_tcp_force_in_frame(pose)
    return force_vector[axis]
  end

  # perform a linear move while constantly checking the force; the move is aborted
  # if the force is exceeded and the robot is stopped
  # note: utilizes the currently active TCP
  # note: while running, check the value of the "current_force_vector" variable to check your forces in the given reference pose
  # param p_target: traget pose in base frame
  # param move_parameters: array [r, a, v] with
  #                        r: blend radius for linear move in m
  #                        a: accleration for linear move in m/s^2
  #                        v: velocity for linear move in m/s
  # param max_forces: maximum allowed absolute force in N along the reference pose's x, y, and z axis as vector [Fx, Fy, Fz]
  # param ignore_dists: array of [start_dist, end_dist] ignore the force value within these distances from the
  #                     start and end point, respectively
  #                     (gets around high force readings from acceleration / deceleration)
  # param refrence_pose: measure the allowed forces along the axes of this pose, defaults to the robot's base,
  #                      x, y, and z values of the pose are ignored
  # return: True if end of linear move was reached, else False
  def movel_checkforce(p_target, move_parameters, max_forces, ignore_dists=[0.0, 0.0], reference_pose=p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]):

    global p_thread_move_target = p_target
    global thread_move_params = move_parameters
    global thread_target_reached = False
    local p_current = get_actual_tcp_pose()  # current pose
    local p_start = get_actual_tcp_pose()  # start pose of move

    # we use this thread to do the moving
    thread move_thread():
      movel(p_thread_move_target, a=thread_move_params[0], v=thread_move_params[1], r=thread_move_params[2])
      thread_target_reached = True
      sync()
      sync()
    end

    # spin the moving thread and keep track of the force
    move_thread_handler = run move_thread()
    while(not thread_target_reached):
      p_current = get_actual_tcp_pose()
      global current_force_vector = get_tcp_force_in_frame(reference_pose)
      if point_dist(p_current, p_start) > ignore_dists[0] and point_dist(p_current, p_target) > ignore_dists[1]:
        if (norm(current_force_vector[0]) > max_forces[0]) or (norm(current_force_vector[1]) > max_forces[1]) or (norm(current_force_vector[2]) > max_forces[2]):
          kill move_thread_handler
          stopl(1)  # TODO: make this value accessible?
          return False
        end
      end
      sync()
    end
    return True
  end


  # Note 1 to self: a target pose in a feature can be converted to the robot's base frame by
  # using pose_in_base = pose_trans(feature_name, pose_in_feature)
  ############################################################################
  # Copyright (C) Danish Technological Institute - All Rights Reserved       #
  # Unauthorized copying of this file, via any medium is strictly prohibited #
  # Proprietary and confidential                                             #
  # Written by AUTHOR <AUTH@dti.dk>, MONTH YEAR                              #
  #                                                                          #
  # Calculation of poses by offsetting a given pose                          #
  #                                                                          #
  # Version                                                                  #
  dti_relative_poses_version = 1                                             #
  #                                                                          #
  ############################################################################

  def get_dti_relative_poses_version():
    return dti_relative_poses_version
  end

  def get_dti_relative_poses_deps():
    # NO DEPS
    return True
  end

  # TODO: testing
  # Note: Poses in UR-script are given as [translation, axis-angle-rotation],
  # NOT [translation, rpy]!!!


  # calculate a pose by giving an offset to a "base"-pose
  # param base_pose: pose that will be offset
  # param pose_delta: amount to offset along each axis of base_pose
  def p_rel(base_pose, pose_delta=p[0, 0, 0, 0, 0, 0]):
    return pose_trans(base_pose, pose_delta)
  end


  # calculate a pose by giving an offset to a "base"-pose in one dimension
  # param base_pose: pose that will be offset
  # param delta: offset along axis in meters / radians
  # param axis: number of axis along which to offset, x=0, y=1, ..., must be in [0, 5]
  def p_rel_1D(base_pose, delta, axis):
    local p_delta = p[0, 0, 0, 0, 0, 0]
    p_delta[axis] = delta
    return p_rel(base_pose, p_delta)
  end


  # offset a pose along its x-axis, see documentation of p_rel_1D
  def p_rel_x(base_pose, delta):
    return p_rel_1D(base_pose, delta, 0)
  end


  # offset a pose along its y-axis, see documentation of p_rel_1D
  def p_rel_y(base_pose, delta):
    return p_rel_1D(base_pose, delta, 1)
  end


  # offset a pose along its z-axis, see documentation of p_rel_1D
  def p_rel_z(base_pose, delta):
    return p_rel_1D(base_pose, delta, 2)
  end


  # offset a pose by rotating around its x-axis in rad, see documentation of p_rel_1D
  def p_rel_Rx(base_pose, delta):
    return p_rel_1D(base_pose, delta, 3)
  end


  # offset a pose by rotating around its y-axis in rad, see documentation of p_rel_1D
  def p_rel_Ry(base_pose, delta):
    return p_rel_1D(base_pose, delta, 4)
  end


  # offset a pose by rotating around its z-axis in rad, see documentation of p_rel_1D
  def p_rel_Rz(base_pose, delta):
    return p_rel_1D(base_pose, delta, 5)
  end
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: SCHUNK Gripper EGI for UR, 0.1.1, SCHUNK GmbH & Co.
  #   Type: SCHUNK EGI Gripper
  ##################################
  ### SCHUNK EGI VARS            ###
  ##################################


  # Connection data:
  SCHUNK_EGI_HOST = "127.0.0.1"
  SCHUNK_EGI_PORT = "56789"
  global SCHUNK_egi_daemon = rpc_factory("xmlrpc", "http://"+ SCHUNK_EGI_HOST + ":" + SCHUNK_EGI_PORT )

  egiTargetPos = 0
  egiPosTolerance = 0.5

  ##################################
  ### SCHUNK egi HELPER FUNC     ###
  ##################################


  def egiPopup(text):
  	popup(text + str_cat(" Errorcode(int): ", SCHUNK_egi_daemon.egi_error_code()) , "SCHUNK EGI ERROR", warning=False, error=True, blocking=True)
  end

  def setTargets(TargetPos, PosTol):
  	egiTargetPos = TargetPos
  	egiPosTolerance = PosTol
  end


  def egiIsInPos():
  	return egiTargetPosReached()
  end


  def egiGraspOK():
  	local posOk = norm( (egiActualPosition()/1000.0) - egiTargetPos ) < egiPosTolerance
  	local gripped = SCHUNK_egi_daemon.egi_gripped()

  	if gripped and posOk:
  		return True
  	else:
  		return False
  	end
  end





  ##################################
  ### SCHUNK EGI XML-RPC CONTROL ###
  ##################################

  def egiReferencing(sync = True):
  	local success = SCHUNK_egi_daemon.egi_referencing(sync)

  	if not success:
  		egiPopup("Error in egi_referencing()")
  	end

  	return success
  end


  def egiRestartModule(sync = True):
  	local shutdown_ok = SCHUNK_egi_daemon.egi_prepare_shutdown()
  	sleep(1)
  	local success = False

  	if SCHUNK_egi_daemon.egi_ready_shutdown():
  		success = SCHUNK_egi_daemon.egi_restart_module(sync)
  	else:
  		success = False
  		egiPopup("EGI is not ready for shutdown")
  	end

  	if not success:
  		egiPopup("Error in egi_restart_module()")
  	end

  	return success
  end

  def egiPrepareShutdown():
  	local shutdown_ok = SCHUNK_egi_daemon.egi_prepare_shutdown()
  	sleep(1)
  	local success = True

  	if not SCHUNK_egi_daemon.egi_ready_shutdown():
  		success = False
  		egiPopup("EGI is not ready for shutdown")
  	end

  	return success
  end

  def egiPosMove(position, speed, sync):

  	local success = SCHUNK_egi_daemon.egi_pos_move(position*1000, speed*1000, sync)

  	if not success:
  		egiPopup("Error in egi_pos_move()")
  	end

  	return success
  end


  def egiRelPosMove(position, speed, sync):
  	local success = SCHUNK_egi_daemon.egi_rel_pos_move(position*1000, speed*1000, sync)

  	if not success:
  		egiPopup("Error in egi_rel_pos_move()")
  	end

  	return success
  end

  def egiGripWorkPiece(force, inside, sync):
  	local success = SCHUNK_egi_daemon.egi_grip_work_piece(force*1000, inside, sync)

  	if (not success) and egiFatalError() :
  		egiPopup("Error in egi_grip_work_piece()")
  	end

  	return success
  end

  def egiReleaseWorkPiece(sync):
  	local success = SCHUNK_egi_daemon.egi_release_work_piece(sync)

  	if (not success) and egiFatalError():
  		egiPopup("Error in egi_release_work_piece()")
  	end

  	return success
  end



  def egiStop():
  	local success = SCHUNK_egi_daemon.egi_stop()

  	if not success:
  		egiPopup("Error in egi_stop()")
  	end

  	return success
  end


  def egiFastStop():
  	local success = SCHUNK_egi_daemon.egi_quick_stop()

  	if not success:
  		egiPopup("Error in egi_quick_stop()")
  	end

  	return success
  end


  def egiStatusString():
  	return SCHUNK_egi_daemon.egi_status_string()
  end


  def egiActualPosition():
  	return SCHUNK_egi_daemon.egi_actual_position()
  end

  def egiAckError():
  	local success = SCHUNK_egi_daemon.egi_acknowledge_error()

  	if not success:
  		egiPopup("Error in egi_acknowledge_error()")
  	end

  	return success
  end

  def egiTargetPosReached():
  	return SCHUNK_egi_daemon.egi_target_pos_reached()
  end

  def egiModuleRef():
  	return SCHUNK_egi_daemon.egi_module_ref()
  end

  def egiWarning():
  	return SCHUNK_egi_daemon.egi_warning()
  end


  def egiFatalError():
  	return SCHUNK_egi_daemon.egi_fatal_error()
  end

  def egiGripped():
  	return SCHUNK_egi_daemon.egi_gripped()
  end

  def egiNoPart():
  	return SCHUNK_egi_daemon.egi_no_part_detect()
  end


  def egiConnected():
  	return SCHUNK_egi_daemon.egi_connected()
  end


  def egiErrorCode():
  	return SCHUNK_egi_daemon.egi_error_code()
  end


  ######################################
  ### SCHUNK EGI XML-RPC CONTROL END ###
  ######################################
  # end: URCap Installation Node
  global Pallet_1_cnt=1
  global Pallet_1_lct=1
  global Pallet_1_lno=1
  global Pallet_1_sep= False
  global Pallet_1_tct=1
  global Approach_p=p[.204107525435, -.244379530535, .120998085174, -2.322242794523, -1.394477886835, .215115158266]
  global Approach_q=[1.9114606586522322, -1.472251044177459, 2.5007594614104995, -2.2056006610869483, -1.7996052848236541, 2.4496766482679364]
  global ToolActionPoint_p=p[.204103104662, -.244387182937, .120990208840, -2.322256480194, -1.394431482473, .215109724920]
  global ToolActionPoint_q=[1.9114383124613588, -1.4722168763843069, 2.5007540192235176, -2.205617327682816, -1.7996060578701432, 2.449690570309887]
  global Exit_1_p=p[.204104434255, -.244381963685, .120982346976, -2.322238573465, -1.394462357023, .215133045170]
  global Exit_1_q=[1.911453236754907, -1.4721955776359437, 2.5007699624691786, -2.2056588225152503, -1.7996212687504274, 2.449681808097429]
  def send_pose():
    $ 78 "send_pose" "noBreak"
    $ 79 "Wait: 0.5"
    sleep(0.5)
    $ 80 "Wait is_steady()"
    while (not(is_steady())):
      sync()
    end
    $ 81 "handle≔recorder.add_sample(get_actual_tool_flange_pose())"
    global handle=recorder.add_sample(get_actual_tool_flange_pose())
  end
  $ 1 "BeforeStart"
  $ 2 "recorder≔rpc_factory('xmlrpc', 'http://192.168.1.119:10000')"
  global recorder=rpc_factory("xmlrpc", "http://192.168.1.119:10000")
  $ 3 "Robot Program"
  $ 55 "Loop 24 times"
  Loop_1 = 0
  while (Loop_1 < 24):
    $ 56 "Pallet_1"
    def Pallet_1_trans(pose):
    return p[pose[0], pose[1], pose[2], 0, 0, 0]
  end
  def Pallet_1_rot(pose):
  return p[0, 0, 0, pose[3], pose[4], pose[5]]
  end
  def Pallet_1_compute_pallet_waypoint(T_base_feature_taught, T_feature_referencePoint_taught, T_referencePoint_approach_taught, T_base_feature, T_base_referencePoint):
  local trans_referencePoint_approach_in_feature_taught = pose_sub(Pallet_1_trans(pose_trans(T_feature_referencePoint_taught, T_referencePoint_approach_taught)), Pallet_1_trans(T_feature_referencePoint_taught))
  local rot_referencePoint_approach_in_feature_taught = pose_trans(Pallet_1_rot(T_feature_referencePoint_taught), pose_trans(Pallet_1_rot(T_referencePoint_approach_taught), pose_inv(Pallet_1_rot(T_feature_referencePoint_taught))))
  T_feature_referencePoint = pose_trans(pose_inv(T_base_feature), T_base_referencePoint)
  rot_referencePoint_approach = pose_trans(pose_inv(Pallet_1_rot(T_feature_referencePoint)), pose_trans(rot_referencePoint_approach_in_feature_taught, Pallet_1_rot(T_feature_referencePoint)))
  T_feature_approach = pose_trans(trans_referencePoint_approach_in_feature_taught, pose_trans(T_feature_referencePoint, rot_referencePoint_approach))
  T_base_approach = pose_trans(T_base_feature, T_feature_approach)
  return T_base_approach
  end
  Pallet_1_tct = 24
  if (Pallet_1_cnt > 24 or Pallet_1_cnt < 1):
    Pallet_1_cnt = 1
  end
  $ 57 "Patterns" "noBreak"
  $ 58 "Grid_Pattern_1" "noBreak"
  $ 63 "Layers" "noBreak"
  if (Pallet_1_cnt < 25):
    Pallet_1_lno = 1
    Pallet_1_lct = Pallet_1_cnt
    global CornerItem_1=pose_trans(p[0.0,0.0,0.0,0.0,0.0,0.0], pose_trans(p[-.000000000000, -.000000000000, -.000000000000, .000000000000, .000000000000, .000000000000], p[.121134425687, -.490584911159, .179293805946, -2.371580394188, -1.717171820841, -.836283957044]))
    global CornerItem_2=pose_trans(p[0.0,0.0,0.0,0.0,0.0,0.0], pose_trans(p[-.000000000000, -.000000000000, -.000000000000, .000000000000, .000000000000, .000000000000], p[.204630869252, -.533116462009, .111420209026, -2.651687551752, -.488741135619, .365153991082]))
    global CornerItem_3=pose_trans(p[0.0,0.0,0.0,0.0,0.0,0.0], pose_trans(p[-.000000000000, -.000000000000, -.000000000000, .000000000000, .000000000000, .000000000000], p[.254469847022, -.386804080684, .111406417891, -2.563863623936, -1.678458730851, .594419841992]))
    global CornerItem_4=pose_trans(p[0.0,0.0,0.0,0.0,0.0,0.0], pose_trans(p[-.000000000000, -.000000000000, -.000000000000, .000000000000, .000000000000, .000000000000], p[.063943653140, -.330966397876, .111437824862, .600124963496, 2.687675467424, -.157176401466]))
    Pallet_1_cnt_x = (Pallet_1_lct - 1) % 6
    Pallet_1_cnt_y = floor((Pallet_1_lct - 1) / 6)
    referencePoint = interpolate_pose(interpolate_pose(CornerItem_1, CornerItem_2, Pallet_1_cnt_x/5), interpolate_pose(CornerItem_4, CornerItem_3,Pallet_1_cnt_x/5), Pallet_1_cnt_y/3)
    direction = p[0,0,1,0,0,0]
    referencePoint = pose_add (referencePoint,p[0.0*direction[0],0.0*direction[1],0.0*direction[2],0,0,0])
  end
  Approach_p = Pallet_1_compute_pallet_waypoint(p[0.0,0.0,0.0,0.0,0.0,0.0], pose_trans(pose_inv(p[0.0,0.0,0.0,0.0,0.0,0.0]), p[0.2041031046618184,-0.24438718293693595,0.12099020883995079,-2.322256480213841,-1.3944314825346655,0.21510972489769675]), p[9.45225545816164E-6,-2.9432537305140727E-6,-6.490859269459026E-6,-7.64809044493913E-6,-1.6522606400686266E-5,-3.1169391921938465E-5], p[0.0,0.0,0.0,0.0,0.0,0.0], referencePoint)
  Approach_p = pose_trans(p[0.2041031046618184,-0.24438718293693595,0.12099020883995079,-2.3222564802138406,-1.3944314825346653,0.21510972489769647], pose_trans(pose_inv(referencePoint), Approach_p))
  ToolActionPoint_p = Pallet_1_compute_pallet_waypoint(p[0.0,0.0,0.0,0.0,0.0,0.0], pose_trans(pose_inv(p[0.0,0.0,0.0,0.0,0.0,0.0]), p[0.2041031046618184,-0.24438718293693595,0.12099020883995079,-2.322256480213841,-1.3944314825346655,0.21510972489769675]), p[-2.7755575615628914E-17,0.0,0.0,0.0,0.0,0.0], p[0.0,0.0,0.0,0.0,0.0,0.0], referencePoint)
  ToolActionPoint_p = pose_trans(p[0.2041031046618184,-0.24438718293693595,0.12099020883995079,-2.3222564802138406,-1.3944314825346653,0.21510972489769647], pose_trans(pose_inv(referencePoint), ToolActionPoint_p))
  Exit_1_p = Pallet_1_compute_pallet_waypoint(p[0.0,0.0,0.0,0.0,0.0,0.0], pose_trans(pose_inv(p[0.0,0.0,0.0,0.0,0.0,0.0]), p[0.2041031046618184,-0.24438718293693595,0.12099020883995079,-2.322256480213841,-1.3944314825346655,0.21510972489769675]), p[4.545203815126131E-6,2.3184740344239785E-6,8.048795913789819E-6,7.680865474497744E-6,-2.0732968226256204E-5,-2.132996903763837E-5], p[0.0,0.0,0.0,0.0,0.0,0.0], referencePoint)
  Exit_1_p = pose_trans(p[0.2041031046618184,-0.24438718293693595,0.12099020883995079,-2.3222564802138406,-1.3944314825346653,0.21510972489769647], pose_trans(pose_inv(referencePoint), Exit_1_p))
  $ 64 "At Each Item" "noBreak"
  $ 65 "Generated Movements" "noBreak"
  $ 66 "MoveJ" "noBreak"
  $ 67 "Approach" "noBreak"
  movej(get_inverse_kin(pose_trans(referencePoint, pose_trans(p[.103980625881, -.212177993592, .245337179466, 2.322256480214, 1.394431482535, -.215109724898], Approach_p)), qnear=Approach_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 68 "MoveL" "noBreak"
  $ 69 "ToolActionPoint" "noBreak"
  movel(pose_trans(referencePoint, pose_trans(p[.103980625881, -.212177993592, .245337179466, 2.322256480214, 1.394431482535, -.215109724898], ToolActionPoint_p)), a=1.2, v=0.25)
  $ 70 "Tool action" "noBreak"
  $ 71 "Wait: 1.0" "noBreak"
  sleep(1.0)
  $ 73 "Call send_pose" "noBreak"
  send_pose()
  $ 74 "MoveL" "noBreak"
  $ 75 "Exit_1" "noBreak"
  movel(pose_trans(referencePoint, pose_trans(p[.103980625881, -.212177993592, .245337179466, 2.322256480214, 1.394431482535, -.215109724898], Exit_1_p)), a=1.2, v=0.25)
  Pallet_1_sep = False
  if (Pallet_1_cnt >= 24):
    Pallet_1_cnt = 1
  else:
    Pallet_1_cnt = Pallet_1_cnt + 1
  end
  Loop_1 = Loop_1 + 1
  end
end
