def random_move_in_box_xmlrpc():
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tcp(p[0.0,0.0,0.2505,0.0,0.0,0.0])
  set_gravity([0.0, 0.0, 9.82])
  set_safety_mode_transition_hardness(1)
  step_count_af622222_8ffe_411c_b543_885b85676eec = 0.0
  thread Step_Counter_Thread_3a036769_d5b4_40c4_a42b_9148721f02fe():
    while (True):
      step_count_af622222_8ffe_411c_b543_885b85676eec = step_count_af622222_8ffe_411c_b543_885b85676eec + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_3a036769_d5b4_40c4_a42b_9148721f02fe()
  set_target_payload(2.260000, [-0.011000, 0.004000, 0.073000], [0.005991, 0.005991, 0.005991, 0.000000, 0.000000, 0.000000])
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  global Bin1=p[0.2974561466316293,-0.26732704439195587,0.07178883692816068,-2.217960466093215,2.2232663586148966,-0.001832193927242358]
  global base_plate=p[0.37300367166245,-0.2795574524839015,-0.0038493076086024425,-0.005519360267162067,0.004050159517635235,3.1415146216674805]
  global cam_bin1=p[0.10701357338580156,-0.4730035438115848,0.23625394450911652,2.220917187706183,-2.2182689073595463,-0.0032844834224181065]
  global cam_bin2=p[-0.273008469056312,-0.47296550260869386,0.23624155449468986,2.220852962713898,-2.2183675667782135,-0.003341384628034132]
  # begin: URCap Installation Node
  #   Source: DTI UR Helper, 1.0.3, Danish Technological Institute
  #   Type: DTI UR Helper
  ############################################################################
  # Copyright (C) Danish Technological Institute - All Rights Reserved       #
  # Unauthorized copying of this file, via any medium is strictly prohibited #
  # Proprietary and confidential                                             #
  # Written by Jens-Jakob Bentsen <jebe@dti.dk>, November 2020               #
  #                                                                          #
  # Force based moving and force checking                                    #
  #                                                                          #
  # Version                                                                  #
  dti_force_version = 2                                                      #
  #                                                                          #
  # dependencies on other DTI script files                                   #
  # int_dummy = NO_DEPENDENCIES                                              #
  #                                                                          #
  ############################################################################

  def get_dti_force_version():
    return dti_force_version
  end

  def get_dti_force_deps():
    # NO DEPS
    return True
  end


  # like UR's builtin get_tcp_force(), but return the force and torque values transformed
  # along the axes of the given pose
  # param pose: any valid pose, defaults to base, the x, y, and z values are ignored
  # return: 6D force vector with [Fx, Fy, Fz, Mx, My, Mz] aligned to pose in N and Nm respectively
  def get_tcp_force_in_frame(pose=p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]):

    # we are only interested in the rotation of pose, set translations to zero
    local target_pose = pose
    target_pose[0] = 0
    target_pose[1] = 0
    target_pose[2] = 0

    # the conversion needs to happen as poses, so we need to convert back and forth a bit
    local force = get_tcp_force()
    local force_vector_as_pose = p[force[0], force[1], force[2], 0, 0, 0]
    local torque_vector_as_pose = p[force[3], force[4], force[5], 0, 0, 0]
    local transformed_force_as_pose = pose_trans(pose_inv(target_pose), force_vector_as_pose)
    local transformed_torque_as_pose = pose_trans(pose_inv(target_pose),torque_vector_as_pose)
    return [transformed_force_as_pose[0], transformed_force_as_pose[1], transformed_force_as_pose[2], transformed_torque_as_pose[0], transformed_torque_as_pose[1], transformed_torque_as_pose[2]]
  end

  # get the force or torque values at the TCP along a single axis of the given pose
  # param axis: number of axis of pose, 0=x, 1=y, ...
  # param pose:  any valid pose, defaults to base, , the x, y, and z values are ignored
  # return: force or torque value in N or Nm respectively
  def get_tcp_force_1d(axis, pose=p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]):
    local force_vector = get_tcp_force_in_frame(pose)
    return force_vector[axis]
  end

  # perform a linear move while constantly checking the force; the move is aborted
  # if the force is exceeded and the robot is stopped
  # note: utilizes the currently active TCP
  # note: while running, check the value of the "current_force_vector" variable to check your forces in the given reference pose
  # param p_target: traget pose in base frame
  # param move_parameters: array [a, v, r] with
  #                        a: accleration for linear move in m/s^2
  #                        v: velocity for linear move in m/s
  #                        r: blend radius for linear move in m
  # param max_forces: maximum allowed absolute force in N along the reference pose's x, y, and z axis as vector [Fx, Fy, Fz]
  # param ignore_dists: array of [start_dist, end_dist] ignore the force value within these distances from the
  #                     start and end point, respectively
  #                     (gets around high force readings from acceleration / deceleration)
  # param refrence_pose: measure the allowed forces along the axes of this pose, defaults to the robot's base,
  #                      x, y, and z values of the pose are ignored
  # return: True if end of linear move was reached, else False
  def movel_checkforce(p_target, move_parameters, max_forces, ignore_dists=[0.0, 0.0], reference_pose=p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]):

    global p_thread_move_target = p_target
    global thread_move_params = move_parameters
    global thread_target_reached = False
    local p_current = get_actual_tcp_pose()  # current pose
    local p_start = get_actual_tcp_pose()  # start pose of move

    # we use this thread to do the moving
    thread move_thread():
      movel(p_thread_move_target, a=thread_move_params[0], v=thread_move_params[1], r=thread_move_params[2])
      thread_target_reached = True
      sync()
      sync()
    end

    # spin the moving thread and keep track of the force
    move_thread_handler = run move_thread()
    while(not thread_target_reached):
      p_current = get_actual_tcp_pose()
      global current_force_vector = get_tcp_force_in_frame(reference_pose)
      if point_dist(p_current, p_start) > ignore_dists[0] and point_dist(p_current, p_target) > ignore_dists[1]:
        if (norm(current_force_vector[0]) > max_forces[0]) or (norm(current_force_vector[1]) > max_forces[1]) or (norm(current_force_vector[2]) > max_forces[2]):
          kill move_thread_handler
          stopl(1)  # TODO: make this value accessible?
          return False
        end
      end
      sync()
    end
    return True
  end


  # Note 1 to self: a target pose in a feature can be converted to the robot's base frame by
  # using pose_in_base = pose_trans(feature_name, pose_in_feature)
  ############################################################################
  # Copyright (C) Danish Technological Institute - All Rights Reserved       #
  # Unauthorized copying of this file, via any medium is strictly prohibited #
  # Proprietary and confidential                                             #
  # Written by AUTHOR <AUTH@dti.dk>, MONTH YEAR                              #
  #                                                                          #
  # Calculation of poses by offsetting a given pose                          #
  #                                                                          #
  # Version                                                                  #
  dti_relative_poses_version = 1                                             #
  #                                                                          #
  ############################################################################

  def get_dti_relative_poses_version():
    return dti_relative_poses_version
  end

  def get_dti_relative_poses_deps():
    # NO DEPS
    return True
  end

  # TODO: testing
  # Note: Poses in UR-script are given as [translation, axis-angle-rotation],
  # NOT [translation, rpy]!!!


  # calculate a pose by giving an offset to a "base"-pose
  # param base_pose: pose that will be offset
  # param pose_delta: amount to offset along each axis of base_pose
  def p_rel(base_pose, pose_delta=p[0, 0, 0, 0, 0, 0]):
    return pose_trans(base_pose, pose_delta)
  end


  # calculate a pose by giving an offset to a "base"-pose in one dimension
  # param base_pose: pose that will be offset
  # param delta: offset along axis in meters / radians
  # param axis: number of axis along which to offset, x=0, y=1, ..., must be in [0, 5]
  def p_rel_1D(base_pose, delta, axis):
    local p_delta = p[0, 0, 0, 0, 0, 0]
    p_delta[axis] = delta
    return p_rel(base_pose, p_delta)
  end


  # offset a pose along its x-axis, see documentation of p_rel_1D
  def p_rel_x(base_pose, delta):
    return p_rel_1D(base_pose, delta, 0)
  end


  # offset a pose along its y-axis, see documentation of p_rel_1D
  def p_rel_y(base_pose, delta):
    return p_rel_1D(base_pose, delta, 1)
  end


  # offset a pose along its z-axis, see documentation of p_rel_1D
  def p_rel_z(base_pose, delta):
    return p_rel_1D(base_pose, delta, 2)
  end


  # offset a pose by rotating around its x-axis in rad, see documentation of p_rel_1D
  def p_rel_Rx(base_pose, delta):
    return p_rel_1D(base_pose, delta, 3)
  end


  # offset a pose by rotating around its y-axis in rad, see documentation of p_rel_1D
  def p_rel_Ry(base_pose, delta):
    return p_rel_1D(base_pose, delta, 4)
  end


  # offset a pose by rotating around its z-axis in rad, see documentation of p_rel_1D
  def p_rel_Rz(base_pose, delta):
    return p_rel_1D(base_pose, delta, 5)
  end
  calibration = rpc_factory("xmlrpc", "http://192.168.1.100:8000/lsfg/calibration")
  train = rpc_factory("xmlrpc", "http://192.168.1.100:8000/lsfg/train")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: SCHUNK Gripper EGI for UR, 0.1.1, SCHUNK GmbH & Co.
  #   Type: SCHUNK EGI Gripper
  ##################################
  ### SCHUNK EGI VARS            ###
  ##################################


  # Connection data:
  SCHUNK_EGI_HOST = "127.0.0.1"
  SCHUNK_EGI_PORT = "56789"
  global SCHUNK_egi_daemon = rpc_factory("xmlrpc", "http://"+ SCHUNK_EGI_HOST + ":" + SCHUNK_EGI_PORT )

  egiTargetPos = 0
  egiPosTolerance = 0.5

  ##################################
  ### SCHUNK egi HELPER FUNC     ###
  ##################################


  def egiPopup(text):
  	popup(text + str_cat(" Errorcode(int): ", SCHUNK_egi_daemon.egi_error_code()) , "SCHUNK EGI ERROR", warning=False, error=True, blocking=True)
  end

  def setTargets(TargetPos, PosTol):
  	egiTargetPos = TargetPos
  	egiPosTolerance = PosTol
  end


  def egiIsInPos():
  	return egiTargetPosReached()
  end


  def egiGraspOK():
  	local posOk = norm( (egiActualPosition()/1000.0) - egiTargetPos ) < egiPosTolerance
  	local gripped = SCHUNK_egi_daemon.egi_gripped()

  	if gripped and posOk:
  		return True
  	else:
  		return False
  	end
  end





  ##################################
  ### SCHUNK EGI XML-RPC CONTROL ###
  ##################################

  def egiReferencing(sync = True):
  	local success = SCHUNK_egi_daemon.egi_referencing(sync)

  	if not success:
  		egiPopup("Error in egi_referencing()")
  	end

  	return success
  end


  def egiRestartModule(sync = True):
  	local shutdown_ok = SCHUNK_egi_daemon.egi_prepare_shutdown()
  	sleep(1)
  	local success = False

  	if SCHUNK_egi_daemon.egi_ready_shutdown():
  		success = SCHUNK_egi_daemon.egi_restart_module(sync)
  	else:
  		success = False
  		egiPopup("EGI is not ready for shutdown")
  	end

  	if not success:
  		egiPopup("Error in egi_restart_module()")
  	end

  	return success
  end

  def egiPrepareShutdown():
  	local shutdown_ok = SCHUNK_egi_daemon.egi_prepare_shutdown()
  	sleep(1)
  	local success = True

  	if not SCHUNK_egi_daemon.egi_ready_shutdown():
  		success = False
  		egiPopup("EGI is not ready for shutdown")
  	end

  	return success
  end

  def egiPosMove(position, speed, sync):

  	local success = SCHUNK_egi_daemon.egi_pos_move(position*1000, speed*1000, sync)

  	if not success:
  		egiPopup("Error in egi_pos_move()")
  	end

  	return success
  end


  def egiRelPosMove(position, speed, sync):
  	local success = SCHUNK_egi_daemon.egi_rel_pos_move(position*1000, speed*1000, sync)

  	if not success:
  		egiPopup("Error in egi_rel_pos_move()")
  	end

  	return success
  end

  def egiGripWorkPiece(force, inside, sync):
  	local success = SCHUNK_egi_daemon.egi_grip_work_piece(force*1000, inside, sync)

  	if (not success) and egiFatalError() :
  		egiPopup("Error in egi_grip_work_piece()")
  	end

  	return success
  end

  def egiReleaseWorkPiece(sync):
  	local success = SCHUNK_egi_daemon.egi_release_work_piece(sync)

  	if (not success) and egiFatalError():
  		egiPopup("Error in egi_release_work_piece()")
  	end

  	return success
  end



  def egiStop():
  	local success = SCHUNK_egi_daemon.egi_stop()

  	if not success:
  		egiPopup("Error in egi_stop()")
  	end

  	return success
  end


  def egiFastStop():
  	local success = SCHUNK_egi_daemon.egi_quick_stop()

  	if not success:
  		egiPopup("Error in egi_quick_stop()")
  	end

  	return success
  end


  def egiStatusString():
  	return SCHUNK_egi_daemon.egi_status_string()
  end


  def egiActualPosition():
  	return SCHUNK_egi_daemon.egi_actual_position()
  end

  def egiAckError():
  	local success = SCHUNK_egi_daemon.egi_acknowledge_error()

  	if not success:
  		egiPopup("Error in egi_acknowledge_error()")
  	end

  	return success
  end

  def egiTargetPosReached():
  	return SCHUNK_egi_daemon.egi_target_pos_reached()
  end

  def egiModuleRef():
  	return SCHUNK_egi_daemon.egi_module_ref()
  end

  def egiWarning():
  	return SCHUNK_egi_daemon.egi_warning()
  end


  def egiFatalError():
  	return SCHUNK_egi_daemon.egi_fatal_error()
  end

  def egiGripped():
  	return SCHUNK_egi_daemon.egi_gripped()
  end

  def egiNoPart():
  	return SCHUNK_egi_daemon.egi_no_part_detect()
  end


  def egiConnected():
  	return SCHUNK_egi_daemon.egi_connected()
  end


  def egiErrorCode():
  	return SCHUNK_egi_daemon.egi_error_code()
  end


  ######################################
  ### SCHUNK EGI XML-RPC CONTROL END ###
  ######################################
  # end: URCap Installation Node
  global HomeWP_p=p[.132768718690, -.491631725724, .236294917659, .001813842110, -3.138402460840, .000773845282]
  global HomeWP_q=[1.5708707571029663, -1.5707022708705445, 1.5708273092852991, -1.570737437610962, -1.570864502583639, 4.0984153747558594E-4]
  def URCancelManualMove():
    $ 28 "URCancelManualMove" "noBreak"
    $ 29 "here≔get_actual_tcp_pose()"
    global here= get_actual_tcp_pose ()
    $ 30 "MoveJ"
    $ 31 "here" "breakAfter"
    movej(here, a=1.3962634015954636, v=1.0471975511965976)
  end
  def InitGripper():
    $ 32 "InitGripper" "noBreak"
    # begin: URCap Program Node
    #   Source: SCHUNK Gripper EGI for UR, 0.1.1, SCHUNK GmbH & Co.
    #   Type: EGI Commands
    $ 33 "EGI Stop"
    egiStop()
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: SCHUNK Gripper EGI for UR, 0.1.1, SCHUNK GmbH & Co.
    #   Type: EGI Commands
    $ 34 "EGI Acknowledge error"
    egiAckError()
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: SCHUNK Gripper EGI for UR, 0.1.1, SCHUNK GmbH & Co.
    #   Type: EGI Commands
    $ 35 "EGI Reference"
    egiReferencing(True)
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: SCHUNK Gripper EGI for UR, 0.1.1, SCHUNK GmbH & Co.
    #   Type: EGI Position
    $ 36 "EGI Position"
    egiPosMove(100.0,150.0,True)
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: SCHUNK Gripper EGI for UR, 0.1.1, SCHUNK GmbH & Co.
    #   Type: EGI Position
    $ 37 "EGI Position"
    egiPosMove(0.0,150.0,True)
    # end: URCap Program Node
  end
  def SetGripperWidth():
    $ 38 "SetGripperWidth" "noBreak"
    $ 39 "If d≟-1"
    if (d == -1):
      $ 40 "'0 mm'"
      # '0 mm'
      # begin: URCap Program Node
      #   Source: SCHUNK Gripper EGI for UR, 0.1.1, SCHUNK GmbH & Co.
      #   Type: EGI Position
      $ 41 "EGI Position"
      egiPosMove(0.0,150.0,True)
      # end: URCap Program Node
    else:
      $ 42 "ElseIf d≟0"
      if (d == 0):
        $ 43 "'40 mm'"
        # '40 mm'
        # begin: URCap Program Node
        #   Source: SCHUNK Gripper EGI for UR, 0.1.1, SCHUNK GmbH & Co.
        #   Type: EGI Position
        $ 44 "EGI Position"
        egiPosMove(40.0,150.0,False)
        # end: URCap Program Node
      else:
        $ 45 "ElseIf d≟1"
        if (d == 1):
          $ 46 "'70 mm'"
          # '70 mm'
          # begin: URCap Program Node
          #   Source: SCHUNK Gripper EGI for UR, 0.1.1, SCHUNK GmbH & Co.
          #   Type: EGI Position
          $ 47 "EGI Position"
          egiPosMove(70.0,150.0,False)
          # end: URCap Program Node
        else:
          $ 48 "ElseIf d≟2"
          if (d == 2):
            $ 49 "'86 mm'"
            # '86 mm'
            # begin: URCap Program Node
            #   Source: SCHUNK Gripper EGI for UR, 0.1.1, SCHUNK GmbH & Co.
            #   Type: EGI Position
            $ 50 "EGI Position"
            egiPosMove(86.0,150.0,False)
            # end: URCap Program Node
          else:
            $ 51 "Else" "noBreak"
            $ 52 "Popup: Gripper width could not be determined (from: SetGripperWidth())"
            popup("Gripper width could not be determined (from: SetGripperWidth())", "Error", False, True, blocking=True)
          end
        end
      end
    end
  end
  def MoveToApproach():
    $ 53 "MoveToApproach" "noBreak"
    $ 66 "Approach≔p_rel(Bin1,p[x/1000,y/1000,0,0,0,rz])"
    global Approach= p_rel (Bin1,p[x/1000,y/1000,0,0,0,rz])
    $ 67 "If get_inverse_kin_has_solution(Approach)"
    if (get_inverse_kin_has_solution(Approach)):
      $ 68 "MoveJ"
      $ 69 "Approach" "breakAfter"
      movej(Approach, a=1.3962634015954636, v=1.0471975511965976)
    else:
      $ 70 "Else" "noBreak"
      $ 71 "Popup: Beyond safety limits"
      popup("Beyond safety limits", "Message", False, False, blocking=True)
    end
  end
  def MoveAndGrasp():
    $ 72 "MoveAndGrasp" "noBreak"
    $ 73 "'Robot MUST be moved to approach point before this routine is called'"
    # 'Robot MUST be moved to approach point before this routine is called'
    $ 74 "zero_ftsensor()"
    zero_ftsensor()
    $ 75 "GraspPoint≔p_rel_z(get_actual_tcp_pose(), 100)"
    global GraspPoint= p_rel_z ( get_actual_tcp_pose (), 100)
    $ 76 "MoveL"
    $ 77 "GraspPoint" "breakAfter"
    global move_thread_flag_77=0
    thread move_thread_77():
      enter_critical
      move_thread_flag_77 = 1
      movel(GraspPoint, a=0.6, v=0.05)
      move_thread_flag_77 = 2
      exit_critical
    end
    move_thread_flag_77 = 0
    move_thread_han_77 = run move_thread_77()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_77
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.001, normalizedPosDir[1] * 0.001, normalizedPosDir[2] * 0.001, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 78 "Until (tool_contact_detection)"
        # begin: URCap Program Node
        #   Source: SCHUNK Gripper EGI for UR, 0.1.1, SCHUNK GmbH & Co.
        #   Type: EGI Grip
        $ 79 "EGI Outside grip"
        setTargets(32.5,0.5)
        egiGripWorkPiece(25.0,False,True)
        # end: URCap Program Node
        break
      end
      sleep(1.0E-10)
      if (move_thread_flag_77 > 1):
        join move_thread_han_77
        break
      end
      sync()
    end
  end
  def MoveToSafety():
    $ 80 "MoveToSafety" "noBreak"
    $ 81 "'Moves 10cm upwards'"
    # 'Moves 10cm upwards'
    $ 82 "Up≔p_rel_z(get_actual_tcp_pose(), -0.10)"
    global Up= p_rel_z ( get_actual_tcp_pose (), -0.10)
    $ 83 "MoveJ"
    $ 84 "Up" "breakAfter"
    movej(Up, a=1.3962634015954636, v=1.0471975511965976)
  end
  $ 2 "BeforeStart"
  $ 3 "Call URCancelManualMove"
  URCancelManualMove()
  $ 4 "MoveJ"
  $ 5 "HomeWP" "breakAfter"
  movej(HomeWP_q, a=1.3962634015954636, v=1.0471975511965976)
  $ 6 "Call InitGripper"
  InitGripper()
  while (True):
    $ 7 "Robot Program"
    $ 8 "'MoveJ in script line as it enables seeding the numeric inverse kinematics solver'"
    # 'MoveJ in script line as it enables seeding the numeric inverse kinematics solver'
    $ 9 "movej(get_inverse_kin(cam_bin1, HomeWP_q))"
    movej(get_inverse_kin(cam_bin1, HomeWP_q))
    # begin: URCap Program Node
    #   Source: DTI UR Helper, 1.0.3, Danish Technological Institute
    #   Type: XML-RPC Call
    $ 10 "XML-RPC Call"
    $ 11 "result≔train.get_grasp_pose()" "noBreak"
    global result=train. get_grasp_pose ()
    # end: URCap Program Node
    $ 12 "x≔result[0]"
    global x=result[0]
    $ 13 "y≔result[1]"
    global y=result[1]
    $ 14 "rz≔result[2]"
    global rz=result[2]
    $ 15 "d≔result[3]"
    global d=result[3]
    $ 16 "Call SetGripperWidth"
    SetGripperWidth()
    $ 17 "Call MoveToApproach"
    MoveToApproach()
    $ 18 "Call MoveAndGrasp"
    MoveAndGrasp()
    $ 19 "Call MoveToSafety"
    MoveToSafety()
    $ 20 "If egiGripped()"
    if ( egiGripped ()):
      $ 21 "'MoveJ in script line as it enables seeding the numeric inverse kinematics solver'"
      # 'MoveJ in script line as it enables seeding the numeric inverse kinematics solver'
      $ 22 "movej(get_inverse_kin(cam_bin2, HomeWP_q))"
      movej(get_inverse_kin(cam_bin2, HomeWP_q))
      # begin: URCap Program Node
      #   Source: SCHUNK Gripper EGI for UR, 0.1.1, SCHUNK GmbH & Co.
      #   Type: EGI Grip
      $ 23 "EGI Release work piece"
      setTargets(20.0,0.5)
      egiReleaseWorkPiece(True)
      # end: URCap Program Node
    else:
      $ 24 "Else" "noBreak"
      $ 25 "d≔1"
      global d=1
      $ 26 "Call SetGripperWidth"
      SetGripperWidth()
    end
  end
end
